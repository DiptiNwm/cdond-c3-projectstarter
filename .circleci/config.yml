version: 2.1

### It's a good practice to keep your commands at the top of the config file. In this project, you'll need at least 2 commands:

commands:
  destroy-environment:
    description: Destroy backend and frontend cloudformation stacks given a workflow ID.
    steps:
      - run:
          name: Destroy Backend Infrastructure
          when: on_fail
          command: aws cloudformation delete-stack --stack-name backend-${CIRCLE_WORKFLOW_ID:0:7}
      - run:
          name: Destroy Frontend Infrastructure
          when: on_fail
          command: aws cloudformation delete-stack --stack-name frontend-${CIRCLE_WORKFLOW_ID:0:7}
      - run:
          name: Destroy Cloudfront Infrastructure
          when: on_fail
          command: aws cloudformation delete-stack --stack-name cloudfront-${CIRCLE_WORKFLOW_ID:0:7}

  revert-migration:
    description: Revert the last migration if successfully run in the current workflow.
    steps:
      - run:
          name: Revert Migration
          when: on_fail
          command: |
            HAS_MIGRATION_RUN=$(curl -H "token: eb8a3f95-36a6-4953-a9ce-571f4deda6e6" --request GET https://api.memstash.io/values/migration_result)
            if $HAS_MIGRATION_RUN = "true"
              then
                cd /home/circleci/project/backend
                echo "Reverting migrations"
                npm run migrations:revert
              else
                echo "NO migration has ocurred"
#     ...

jobs:
  build-frontend:
    docker:
      - image: circleci/node:12
    steps:
      - checkout
      - run:
          name: Install NPM Dependencies
          command: cd /home/circleci/project/frontend && npm install
      - run:
          name: Build
          command: cd /home/circleci/project/frontend && npm run build:prod

  build-backend:
    docker:
      - image: circleci/node:12
    steps:
      - checkout
      - run:
          name: Install NPM Dependencies
          command: cd /home/circleci/project/backend && npm install
      - run:
          name: Build
          command: cd /home/circleci/project/backend && npm run build

  test-frontend:
    docker:
      - image: circleci/node:12
    steps:
      - checkout
      - run:
          name: Install NPM Dependencies
          command: cd /home/circleci/project/frontend && npm install
      - run:
          name: Test
          command: cd /home/circleci/project/frontend && npm run test

  test-backend:
    docker:
      - image: circleci/node:12
    steps:
      - checkout
      - run:
          name: Install NPM Dependencies
          command: cd /home/circleci/project/backend && npm install
      - run:
          name: Test
          command: cd /home/circleci/project/backend && npm run test

  scan-frontend:
    docker:
      - image: circleci/node:12
    steps:
      - checkout
      - run:
          name: Install NPM Dependencies
          command: cd /home/circleci/project/frontend && npm install
      - run:
          name: Audit NPM Dependencies
          command: cd /home/circleci/project/frontend && npm audit --audit-level=critical

  scan-backend:
    docker:
      - image: circleci/node:12
    steps:
      - checkout
      - run:
          name: Install NPM Dependencies
          command: cd /home/circleci/project/backend && npm install
      - run:
          name: Audit NPM Dependencies
          command: cd /home/circleci/project/backend && npm audit --audit-level=critical

  deploy-infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Deploy Backend Infrastructure
          command: |
            aws cloudformation deploy \
            --template-file .circleci/files/backend.yml \
            --stack-name backend-${CIRCLE_WORKFLOW_ID:0:7} \
            --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"
      - run:
          name: Save Backend URL
          when: on_success
          command: |
            BACKEND_API=$(aws ec2 describe-instances \
              --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --query 'Reservations[*].Instances[*].PublicDnsName' \
              --output text)
            curl -H "Content-Type: text/plain" -H "token: c1bb8d5a-fbac-4fad-9506-124d34aa4fb6" \
              --request PUT \
              --data $BACKEND_API \
              https://api.memstash.io/values/backend_api
      - run:
          name: Deploy Frontend Infrastructure
          command: |
            aws cloudformation deploy \
            --template-file .circleci/files/frontend.yml \
            --stack-name frontend-${CIRCLE_WORKFLOW_ID:0:7} \
            --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"
      - run:
          name: Deploy Cloudfront Infrastructure
          command: |
            aws cloudformation deploy \
            --template-file .circleci/files/cloudfront.yml \
            --stack-name cloudfront-${CIRCLE_WORKFLOW_ID:0:7} \
            --parameter-overrides WorkflowID="${CIRCLE_WORKFLOW_ID:0:7}"
      - destroy-environment

  configure-infrastructure:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints:
            - "ea:7d:21:ef:24:86:2a:4f:0b:b1:c3:fa:3f:e9:2a:4d"
      - run:
          name: Install ansible
          command: apk add --update ansible
      - run:
          name: Install curl
          command: apk add curl
      - run:
          name: Configure backend server
          command: |
            echo $(curl -H "token: c1bb8d5a-fbac-4fad-9506-124d34aa4fb6" --request GET https://api.memstash.io/values/backend_api) >> .circleci/ansible/inventory
            ansible-playbook -i .circleci/ansible/inventory .circleci/ansible/config-server-playbook.yml

  run-migrations:
    docker:
      - image: circleci/node:12
    steps:
      - checkout
      - run:
          name: Install Dependencies
          command: cd /home/circleci/project/backend && npm install
      - run:
          name: Run migrations
          no_output_timeout: 10m
          command: cd /home/circleci/project/backend && npm run migrations | tee migrations_results.txt
      - run:
          name: Save migration result
          command: |
            cd /home/circleci/project/backend
            if grep "executed successfully" migrations_results.txt
            then
              curl -H "Content-Type: text/plain" -H "token: eb8a3f95-36a6-4953-a9ce-571f4deda6e6" --request PUT --data "true" https://api.memstash.io/values/migration_result
            else
              curl -H "Content-Type: text/plain" -H "token: eb8a3f95-36a6-4953-a9ce-571f4deda6e6" --request PUT --data "false" https://api.memstash.io/values/migration_result
            fi
      - revert-migration
      - destroy-environment

#  deploy-frontend:

#  deploy-backend:

#  smoke-test:

#  cloudfront-update:

workflows:
  build-test-and-deploy:
    jobs:
      - build-frontend
      - build-backend
      - test-frontend:
          requires:
            - build-frontend
      - test-backend:
          requires:
            - build-backend
      - scan-frontend:
          requires:
            - test-frontend
      - scan-backend:
          requires:
            - test-backend
      - deploy-infrastructure:
          filters:
            branches:
              only: main
          requires:
            - scan-frontend
            - scan-backend
      - configure-infrastructure:
          filters:
            branches:
              only: main
          requires:
            - deploy-infrastructure
      - run-migrations:
          filters:
            branches:
              only: main
          requires:
            - deploy-infrastructure
